#!/usr/bin/env python2.7

class LilyBlock(object):

    def __init__(self, text, name = None):
        self.text = text
        self.name = name

    def outer_text(self):
        if self.name is None:
            return self.text
        return '\\%s { %s }' % (self.name, self.text)

    def remove_block(self, name):
        found = self.find_block(name)
        if found is None:
            return
        block, start, end = found
        self.text = self.text[:start] + self.text[(end + 1):]

    def replace_block(self, name, block):
        found = self.find_block(name)
        if found is None:
            return
        old_block, start, end = found
        self.text = self.text[:start] + block.outer_text() + self.text[(end + 1):]

    def add_block(self, block):
        self.text += '\n' + block.outer_text()

    def find_block(self, name):
        '''
        Find the first matching Lilybond block.
        '''
        start = self.text.find('\\' + name)
        if start == -1:
            return None
        p = start + len('\\' + name)

        block_start = start
        block_end = None
        inner_start = None
        inner_end = None
        
        braces = 0
        while p < len(self.text):

            c = self.text[p]

            if c == '{':
                if braces == 0:
                    inner_start = p + 1
                braces += 1
            elif c == '}':
                braces -= 1
                if braces == 0:
                    inner_end = p - 1
                    p += 1
                    break
            elif c == '\\' and braces == 0:
                break

            p += 1

        if braces != 0:
            return None

        block_end = p - 1

        if inner_start is None:
            block = LilyBlock('', name)
        else:
            block = LilyBlock(self.text[inner_start:inner_end], name)

        return (block, block_start, block_end)

def prepare_for_midi_output(text):
    main = LilyBlock(text)
    score = main.find_block('score')
    basic_midi = LilyBlock('', 'midi')
    if score is None:
        score = LilyBlock('', 'score')
        score.add_block(basic_midi)
        main.add_block(score)
    else:
        score = score[0]
        midi = score.find_block('midi')
        if midi is None:
            score.add_block(basic_midi)
        score.remove_block('layout')
        main.replace_block('score', score)
    return main.outer_text()



if __name__ == '__main__':

    import argparse
    import tempfile
    import subprocess
    import os

    parser = argparse.ArgumentParser()
    parser.add_argument('lilypondfile')
    parser.add_argument('--outfile', '-o', default = 'out')
    args = parser.parse_args()

    with open(args.lilypondfile, 'r') as f:
        in_text = f.read()
        out_text = prepare_for_midi_output(in_text)
        tmp_file = tempfile.NamedTemporaryFile(suffix = '.ly', delete = False)
        tmp_file.write(out_text)
        tmp_file.close()

        try:
            print(subprocess.check_output(
                    ['lilypond', '-o', args.outfile, tmp_file.name], shell = False,
                    stderr=subprocess.STDOUT))
        except Exception:
            print('Potential error converting %s' % args.lilypondfile)
        os.unlink(tmp_file.name)
